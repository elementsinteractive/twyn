# This workflow will publish our package on pypi

name: Publish

on:
  push:
    tags:
      - "v*.*.*"

env:
  UV_VERSION: "0.8.22"

jobs:
  build_and_test_package:
    name: Build and test package
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Build and test package
        id: build-test
        uses: ./.github/actions/python-package-build
        with:
          test-package: "true"
          publish: "false"
          uv-version: ${{ env.UV_VERSION }}
          cli-test-command: "twyn --version"

      - name: Upload package artifacts
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: python-package-${{ github.sha }}
          path: ${{ steps.build-test.outputs.dist-path }}
          retention-days: 1

  build_and_test_docker:
    name: Build and test Docker image (${{ matrix.arch }})
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - arch: amd64
            platform: linux/amd64
            cache-ref: buildcache-amd64
            needs-qemu: false
          - arch: arm64
            platform: linux/arm64
            cache-ref: buildcache-arm64
            needs-qemu: true
    steps:
      - name: Check out the repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image (${{ matrix.arch }})
        uses: ./.github/actions/docker-build
        with:
          push: false
          load: true
          platforms: ${{ matrix.platform }}
          dockerfile: ./Dockerfile
          context: .
          image-name: elementsinteractive/twyn
          cache-from: type=registry,ref=ghcr.io/elementsinteractive/twyn:${{ matrix.cache-ref }}
          cache-to: type=registry,ref=ghcr.io/elementsinteractive/twyn:${{ matrix.cache-ref }},mode=max,compression=zstd,force-compression=true,oci-mediatypes=true
          setup-qemu: ${{ matrix.needs-qemu }}

      - name: Test Docker image (${{ matrix.arch }})
        run: |
          docker run --platform ${{ matrix.platform }} --rm elementsinteractive/twyn --version

  publish_to_pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build_and_test_package, build_and_test_docker]

    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Download package artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: python-package-${{ github.sha }}
          path: dist

      - name: Install uv
        uses: astral-sh/setup-uv@b75a909f75acd358c2196fb9a5f1299a9a8868a4 # v6.7.0
        with:
          version: ${{ env.UV_VERSION }}

      - name: Publish package
        run: |
          uv publish

  publish_to_dockerhub:
    name: Push Docker images to registries
    runs-on: ubuntu-latest
    needs: [build_and_test_docker, build_and_test_package]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Log in to Docker Hub
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker images
        uses: ./.github/actions/docker-build
        with:
          push: "true"
          platforms: linux/amd64,linux/arm64
          dockerfile: ./Dockerfile
          context: .
          image-name: elementsinteractive/twyn
          cache-from: |
            type=registry,ref=ghcr.io/elementsinteractive/twyn:buildcache-amd64
            type=registry,ref=ghcr.io/elementsinteractive/twyn:buildcache-arm64

      - name: Delete old cache entries
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get all versions of the container package
          versions=$(gh api "orgs/elementsinteractive/packages/container/twyn/versions" --paginate)

          # Extract version IDs that do NOT have any buildcache-* tags (buildcache-amd64, buildcache-arm64, etc.)
          ids_to_delete=$(echo "$versions" | jq -r '.[] | select(.metadata.container.tags | map(test("^buildcache-")) | any | not) | .id')

          # Delete them
          for id in $ids_to_delete; do
            echo "Deleting old cache version ID: $id"
            gh api -X DELETE "orgs/elementsinteractive/packages/container/twyn/versions/$id"
          done

  release_notes:
    runs-on: ubuntu-latest
    needs: [publish_to_pypi, publish_to_dockerhub]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 #v2.3.3
        with:
          generate_release_notes: true
          token: "${{ secrets.GITHUB_TOKEN }}"
