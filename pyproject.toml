[project]
name = "twyn"
version = "2.8.17"
description = ""
authors = [
    {name= "Daniel Sanz"},
    {name= "Sergio Castillo",  email="s.cast.lara@gmail.com"},
    {name= "Ludo van Orden"},
    {name= "Dmitrii Fedotov"},
]
maintainers = [
    {name="Daniel Sanz"}, 
    {name="Sergio Castillo", email="s.cast.lara@gmail.com"}
]
readme = "README.md"
requires-python = "<4,>=3.9"
dependencies = [
    "requests<3.0.0,>=2.32.3",
    "dparse<1.0.0,>=0.6.4",
    "click<9.0.0,>=8.1.8",
    "rich<14.0.0,>=13.9.4",
    "rapidfuzz<4.0.0,>=2.13.7",
    "pyparsing<4.0.0,>=3.2.1",
    "tomlkit<0.14.0,>=0.11.6",
    "tomli<3.0.0,>=2.2.1; python_version < \"3.13\"",
]

[dependency-groups]
dev = [
    "pytest<9.0.0,>=7.1.3",
    "mypy<1.16,>=0.982",
    "pytest-cov<7,>=4",
    "ipdb<1.0.0,>=0.13.9",
    "commitizen<5.0,>=2.38",
    "pdbpp<1.0.0,>=0.10.3",
    "ruff<0.9.7,>=0.5.1",
    "types-requests<3.0.0.0,>=2.32.0.20241016",
]

[build-system]
requires = ["hatchling", "wheel"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
include = [
    "src/*",       
    "README.md",        
    "LICENSE",           
]


[tool.uv]
package = true

[project.scripts]
twyn = "twyn.cli:entry_point"
[tool.ruff]
target-version = "py39"
line-length = 120

src = ["twyn", "tests"]


[tool.ruff.lint]
select = [
    "C9",  # mccabe
    "E",   # pycodestyle error
    "W",   # pycodestyle warning
    "F",   # pyflakes
    "B",   # bugbear
    "D",   # pydocstyle
    "I",   # isort
    "C4",  # comprehensions
    "SIM", # simplify
    "N",   # pep8-naming
    "TRY", # tryceratops
]

ignore = [
    'D1',     # pydocstyle enforcement of docstrings everywhere
    'TRY003', # tryceratops too noisy
    "E501",   # line length (black handles it)
]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.mypy]
python_version = "3.9"
ignore_missing_imports = true
namespace_packages = true
explicit_package_bases = true
warn_no_return = false
warn_unused_ignores = true
disallow_any_generics = true


[tool.pytest.ini_options]
addopts = """
    -s
    --cov
    --cov-report term-missing
    --cov-report=xml:./tests/coverage.xml
    --junitxml=./tests/junit.xml
"""

[tool.coverage.run]
omit = ["tests/*"]

[tool.coverage.report]
fail_under = 95
exclude_lines = ["if TYPE_CHECKING:", "pragma: no cover"]


[tool.commitizen]
version_files = ["pyproject.toml:version"]
version = "2.8.17"
tag_format = "v$version"
name = "cz_customize"


[tool.commitizen.customize]
bump_pattern = "^(break|feat|fix|refactor|perf|ci|docs|style|test|chore|revert|build)(\\(.+\\))?(!)?"
change_type_order = [
    "Breaking",
    "Feat",
    "Fix",
    "Refactor",
    "Perf",
    "CI",
    "Docs",
    "Technical",
    "Tests",
]
bump_message = "bump: version $current_version â†’ $new_version"
schema = "<type>(<scope>): <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n(BREAKING CHANGE: )<footer>"
schema_pattern = "(?s)(build|ci|docs|feat|fix|perf|refactor|style|test|chore|revert|bump)(\\(\\S+\\))?!?:( [^\\n\\r]+)((\\n\\n.*)|(\\s*))?$"
commit_parser = "^(?P<change_type>feat|fix|refactor|perf|break|ci|docs|style|test|chore|revert|build)(?:\\((?P<scope>[^()\\r\\n]*)\\)|\\()?(?P<breaking>!)?:\\s(?P<message>.*)?"
version_parser = "(?P<version>([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?(?:\\+[0-9A-Za-z-]+)?(\\w+)?)"

[tool.commitizen.customize.bump_map]
"^.+!$" = "MAJOR"
"^break" = "MAJOR"
"^feat" = "MINOR"
"^fix" = "PATCH"
"^refactor" = "PATCH"
"^perf" = "PATCH"
"^ci" = "PATCH"
"^docs" = "PATCH"
"^style" = "PATCH"
"^test" = "PATCH"
"^chore" = "PATCH"
"^revert" = "PATCH"
"^build" = "PATCH"
