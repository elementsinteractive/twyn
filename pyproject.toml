[tool.poetry]
name = "twyn"
version = "2.5.1"
description = ""
authors = ["Daniel Sanz, Sergio Castillo, Ludo van Orden, Dmitrii Fedotov"]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.9,<4"
requests = "^2.28.2"
dparse = "^0.6.2"
click = "^8.1.3"
rich = "^13.3.1"
rapidfuzz = ">=2.13.7,<4.0.0"
pyparsing = "^3.0.9"
tomlkit = "^0.11.6"


[tool.poetry.scripts]
twyn = "twyn.cli:entry_point"


[tool.poetry.group.dev.dependencies]
pytest = "^7.1.3"
mypy = ">=0.982,<1.4"
black = ">=22.10,<24.0"
pytest-cov = "^4.0.0"
ipdb = "^0.13.9"
commitizen = "^2.38.0"
pdbpp = "^0.10.3"
ruff = ">=0.0.239,<0.0.270"
types-requests = "^2.28.11.12"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
target-version = "py310"
line-length = 120
select = [
    "C9",  # mccabe
    "E",   # pycodestyle error
    "W",   # pycodestyle warning
    "F",   # pyflakes
    "B",   # bugbear
    "D",   # pydocstyle
    "I",   # isort
    "C4",  # comprehensions
    "SIM", # simplify
    "N",   # pep8-naming
    "TRY", # tryceratops
]
ignore = [
    'D1',     # pydocstyle enforcement of docstrings everywhere
    'TRY003', # tryceratops too noisy
    "E501",   # line length (black handles it)
]
src = ["twyn", "tests"]

[tool.ruff.pydocstyle]
convention = "pep257"


[tool.mypy]
python_version = "3.11"
ignore_missing_imports = true
namespace_packages = true
explicit_package_bases = true
warn_no_return = false
warn_unused_ignores = true
disallow_any_generics = true


[tool.black]
max-line-length = 120

[tool.pytest.ini_options]
addopts = """
    -s
    --cov
    --cov-report term-missing
    --cov-report=xml:./tests/coverage.xml
    --junitxml=./tests/junit.xml
"""

[tool.coverage.run]
omit = [
    "tests/*",
]

[tool.coverage.report]
fail_under = 95
exclude_lines = ["if TYPE_CHECKING:", "pragma: no cover"]


[tool.commitizen]
version_files = ["pyproject.toml:version"]
version = "2.5.1"
tag_format = "v$version"
name = "cz_customize"


[tool.commitizen.customize]
bump_pattern = "^(break|feat|fix|refactor|perf|ci|docs|style|test|chore|revert|build)(\\(.+\\))?(!)?"
change_type_order = [
    "Breaking",
    "Feat",
    "Fix",
    "Refactor",
    "Perf",
    "CI",
    "Docs",
    "Technical",
    "Tests",
]
bump_message = "bump: version $current_version â†’ $new_version"
schema = "<type>(<scope>): <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n(BREAKING CHANGE: )<footer>"
schema_pattern = "(?s)(build|ci|docs|feat|fix|perf|refactor|style|test|chore|revert|bump)(\\(\\S+\\))?!?:( [^\\n\\r]+)((\\n\\n.*)|(\\s*))?$"
commit_parser = "^(?P<change_type>feat|fix|refactor|perf|break|ci|docs|style|test|chore|revert|build)(?:\\((?P<scope>[^()\\r\\n]*)\\)|\\()?(?P<breaking>!)?:\\s(?P<message>.*)?"
version_parser = "(?P<version>([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?(?:\\+[0-9A-Za-z-]+)?(\\w+)?)"

[tool.commitizen.customize.bump_map]
"^.+!$" = "MAJOR"
"^break" = "MAJOR"
"^feat" = "MINOR"
"^fix" = "PATCH"
"^refactor" = "PATCH"
"^perf" = "PATCH"
"^ci" = "PATCH"
"^docs" = "PATCH"
"^style" = "PATCH"
"^test" = "PATCH"
"^chore" = "PATCH"
"^revert" = "PATCH"
"^build" = "PATCH"
